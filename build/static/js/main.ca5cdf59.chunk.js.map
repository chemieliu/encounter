{"version":3,"sources":["components/test/Dog.js","components/login/Login.js","App.js","serviceWorker.js","index.js"],"names":["Dog","props","onchange","info","file","status","message","success","name","response","fileName","encodeName","encodeURI","window","location","href","axios","method","url","params","then","res","console","log","error","setState","fileList","state","this","action","onChange","UploadOutlined","React","Component","Header","Footer","Content","Login","style","width","margin","backgroundColor","maxWidth","Item","type","htmlType","className","App","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0YA+EeA,E,YAxEb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAWPC,SAAW,SAACC,GAKX,GAHIA,EAAKC,KAAKC,OAGW,SAArBF,EAAKC,KAAKC,OAAmB,CAC/BC,EAAA,EAAQC,QAAR,UAAmBJ,EAAKC,KAAKI,KAA7B,gCAD+B,MAENL,EAAKC,KAAKK,SAA5BC,EAFwB,EAExBA,SAASF,EAFe,EAEfA,KACZG,EAAaC,UAAUF,EAAWF,GACtCK,OAAOC,SAASC,KAAhB,sDAAoEJ,GAEpEK,IAAM,CACJC,OAAO,MACPC,IAAI,qCACJC,OAAO,CACLT,SAASF,KAEVY,MAAK,SAAAC,GACNC,QAAQC,IAAIF,UAMgB,UAArBlB,EAAKC,KAAKC,QACnBC,EAAA,EAAQkB,MAAR,UAAiBrB,EAAKC,KAAKI,KAA3B,yBAGF,EAAKiB,SAAS,CACZC,SAAS,YAAIvB,EAAKuB,aAvCpB,EAAKC,MAAO,CACVD,SAAS,IAHK,E,mHAgDhB,OACE,6BACE,uBACAlB,KAAM,OACNkB,SAAUE,KAAKD,MAAMD,SACrBG,OAAO,mCACPC,SAAUF,KAAK1B,UACb,2BACE,kBAAC6B,EAAA,EAAD,MADF,0B,GAxDQC,IAAMC,W,kCCHhBC,E,IAAAA,OAAQC,E,IAAAA,OAASC,E,IAAAA,QA8BVC,MA3Bf,SAAepC,GACX,OACI,uBAAQqC,MAAO,CAACC,MAAM,OAAOC,OAAO,aAChC,kBAACN,EAAD,CAAQI,MAAO,CAACG,gBAAgB,SAAhC,WACA,kBAACL,EAAD,MAEA,uBAAME,MAAO,CAACI,SAAS,UACnB,sBAAMC,KAAN,CAAWnC,KAAK,aAGhB,sBAAMmC,KAAN,CAAWnC,KAAK,aAGhB,sBAAMmC,KAAN,KAEI,uBAAQC,KAAK,UAAUC,SAAS,SAASC,UAAU,qBAAnD,YAKZ,kBAACX,EAAD,kBCPOY,MAZf,WACE,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAO,OAAOC,UAAajD,IAClC,kBAAC,IAAD,CAAOgD,KAAO,IAAIC,UAAaZ,OCArBa,QACW,cAA7BrC,OAAOC,SAASqC,UAEe,UAA7BtC,OAAOC,SAASqC,UAEhBtC,OAAOC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.ca5cdf59.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Upload, Button,message } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\n\r\n\r\nclass Dog extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state ={\r\n      fileList:[],\r\n    }\r\n\r\n  }\r\n  componentDidMount() {\r\n    // axios.get(\"http://localhost:5000/\").then(res => {\r\n    //   console.log(res);\r\n    // });\r\n  }\r\n   onchange = (info)=>{\r\n    \r\n    if (info.file.status !== 'uploading') {\r\n      // console.log(info.file, info.fileList);\r\n    }\r\n    if (info.file.status === 'done') {\r\n      message.success(`${info.file.name} file uploaded successfully`);\r\n      const {fileName,name } = info.file.response\r\n      let encodeName = encodeURI(fileName + name)\r\n      window.location.href=`http://47.98.101.206:5000/download?fileName=${encodeName}`\r\n      // console.log(response)\r\n      axios({\r\n        method:\"get\",\r\n        url:\"http://47.98.101.206:5000/download\",\r\n        params:{\r\n          fileName:name\r\n        }\r\n      }).then(res=>{\r\n        console.log(res)\r\n      })\r\n      // axios.post(\"http://localhost:5000/download\",{params:{fileName:fileName+name}}).then(re=>{\r\n      //   console.log(\"good\")\r\n      // })\r\n    \r\n    } else if (info.file.status === 'error') {\r\n      message.error(`${info.file.name} file upload failed.`);\r\n     \r\n    }\r\n    this.setState({\r\n      fileList:[...info.fileList]\r\n    })\r\n    \r\n\r\n  }\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <Upload \r\n        name ='file'\r\n        fileList={this.state.fileList}\r\n        action='http://47.98.101.206:5000/upload'\r\n        onChange={this.onchange}>\r\n          <Button>\r\n            <UploadOutlined /> Click to Upload\r\n          </Button>\r\n        </Upload>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// function Dog() {\r\n//     return(\r\n//         <div>\r\n//             This is a dog!\r\n//             <input type=\"file\" accept=\"audio/*\"></input>\r\n//         </div>\r\n//     )\r\n\r\n// }\r\nexport default Dog;\r\n","import React from 'react';\r\nimport { Form, Button ,Layout} from 'antd';\r\n\r\nconst { Header, Footer,  Content } = Layout;\r\n\r\n\r\nfunction Login(props) {\r\n    return(\r\n        <Layout style={{width:'30vw',margin:'10% auto'}}>\r\n            <Header style={{backgroundColor:'gray'}}>Welcome</Header>\r\n            <Content>\r\n            </Content>\r\n            <Form style={{maxWidth:'200px'}}>\r\n                <Form.Item name=\"username\">\r\n                   \r\n                </Form.Item>\r\n                <Form.Item name=\"password\"> \r\n                 \r\n                </Form.Item>\r\n                <Form.Item>\r\n\r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        <Footer>YuanHou</Footer>\r\n        </Layout>\r\n\r\n\r\n    )\r\n\r\n}\r\nexport default Login\r\n","import React from 'react';\n\nimport './App.css';\nimport {BrowserRouter,Switch,Route} from 'react-router-dom'\nimport Dog from './components/test/Dog'\nimport Login from './components/login/Login'\n\nfunction App() {\n  return (\n      <BrowserRouter>\n        <Switch>\n          <Route path = \"/dog\" component = {Dog}></Route>\n          <Route path = \"/\" component = {Login}></Route>\n        </Switch>\n\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}